// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity ^0.8.25;

import {Test} from "forge-std/Test.sol";
import {Vm} from "forge-std/Vm.sol";
import {console2} from "forge-std/console2.sol";
import {UltraVerifier} from "../../src/validators/private-owner/plonk_vk.sol";

contract PrivateOwnerVerifyTest is Test {
    // Password verifier and validator
    UltraVerifier verifier =
        UltraVerifier(0x9FAc2Bc1f0575883d2F24A29ebC6987502fa1432);

    function test_verify() public {
        bytes memory proof = bytes(
            hex"03fd7713f79669ca97d44d2214f2101b01df33fcd4e8d02394fc26fc356bc9620d045ee8260e9bc9e2937ff1a0db52883b9eff9c3eee9764d65ea12f290b2a9c2095745ffc92ac2e8169c4748509db669067a9275592d2c42bd95d29ff401be0155ffee876b2e7628b8d696f3918e12cfffe0b0d01fc0b3579499c1cecd925c40af4ded35b3f3e8358127334a555a07022a48748bf8216e2e0063491013d2906078ec968192ca5e563f6b6e42cd6f00ce41401fd5b6039a44c3539616024365c132be1d268f14c7b58b17b8ff5cb15f22603a877801d9d11d23e7cc4197e0fef2a19caf1478d8801605a0ec94127d9d04fca5995b820f64b8f8d462016b7ef820b853ad1573daac248fb17900354db2857b061bbcf6303c6e089ab629b9c61f102297bc5e1c7a374d8ad622578f622227b046e75099efec9e64e56f78c3cb9f5157278cdb315c9315015d1a64e4635e4969f4e19df1a18155b1584876f64379216fb3e206d9bc3b549bfdb7080dd1479a57cf9ecd655e298150b9d7c1a4c51e217776917522ed448d7a9da436fe6565036f3f32511ae368cc634fa6b6add78e92967eb4f3314564f316fb32fad7583b073abc93ddf8edc26a2a1b916d4f585bf0315521781af8a01beb996ba5a8e09efca684146c8ded14bce2533672a8874260d3791c18ff9ed5fbd8c20a8eb7f4345b9983d17f7f0b73abe25b8f417592de21fa22d6fecf368105b872fa47cf9c1aabcea9cd7923aeec9c8ac8b87cd6fa2db12b3a858acab9e6f5af4996fc523da7aa8e7402076e8ab663bd97bd73f5c9c8f153da69d6c60e33ee88c77afe2a694780b70ba69fbf9efdff808dbd1634a8e471fab388fcfd6ab7ba6dfcc21c3315ad96a31c8e052479aee9117f0c347852a5a2a758055dd6da987aae05e4eccb4a07882067c420a9c9587867b99846bb64cc70b5a9629f6b68dd382399d30487314251d2c2c9bcb6ba1dedbd4cd4412029bdd021cd320ba838c80b70f3c6928d01c10e943d550a53770f9a5accd399a3dd9b613c72daeaa1da68f39efe4871af2f5f3dd5ac83161090dfb468406d6f13c64ff15e7d26b947e9145c387bd2a9ceaa3c3acb46cf8169dee3970dd88082c2fb06b2e01597a98195b88be4f897feda214ce011025a05bf98f060d310d90a265f93b08a37f13fa0baf45ee529834cdf2e6d808fe729dfab1b8c7d1b64765d834a8aa1253747a039f4914b8c3fbbe5b866c272129c978326f3dcf640915b6fa0fad19127fbc811f305cb098b0fb2cd4102789ccfede60619f27b054a356469966716c0cedd9e2914d77c5b59e7c71b459eda26eb1ac2267375ae2e37943eb6fdad4d91964f877092c1f3c3e555b22876ae04fa539c2211896ba90205c1f8e0fda684e155914445fce3d9719143ebb556b275f7fba9b93dfb0bc04abe07408ca9b1e1a039a769a4a76f25552e85768729991f48877bd9c8532aa311d13a3598e63fa9902626c755501842dbbb13a6f153a7ed899d0216f6729462d6e35cf84ae7638311527c2e89105eaab37d866c0117c29e0fb025ebb04fed98d5f9505b7d4f97347132a13fffb6085625d91e5a6f35c8dcd95c78d8f5631f33950c572d64894b0ad23aadc3b8948181c2ec5dced7905a9dfe71dfe08200540cdd51b3085f0658b730b1909253281f01697581aa4a786dd91f5986928a3aa1b80c7b524d6bf028d8d25f46c8f0d03cca463b6caa960cdab7678bc614802df909a39aabe86f89de194060da269c455f047ca67f55cd87024467202483bd53a9e57fc7cb2362e4b33302ed61f52f2aa6b1b263a51adff27da6ce08f6f39bbace1e008706d6a762ef3241e9b828bf08fd3229788e92be249609d712d824fb064d27b0da6d8c439851ef71f11626ca812d7946fc989c4d30c97b1e43f6f7c9e6011a3a4d6291af730e56c0a33fd7fc44b9f706726db69ac4af597f56d6b9f92aa2ef423b57e573147f8aa21917cba3ff4cc0033ac4d0bb771563f2d37e3918b4ce7f6a19d10fe0ec9aa60019796833660b182508ab53152c4d31e8a165c0d9ec86e9b52ab52821556f8fe24c8c37a443f56448deb4ce123beb9aa63977b8cf470abe698447e3e350608c00971ed96ddc43a4db5114c8e40f8b176d846ee15d3d02c798fe38f9e650efc260c87db01e439d4e9afe99663d46b4c280af014e0e898f84b7f432317cde41c9218119675b79d5718b74155947e15c6720abad9a1df766d800b3831aa634ff1ee0381cbc237108899c10ef177054e20f39a10b9e3bae93b2cf83cb1e06e1543c70a38f98599a351ade9471fa31cbebe3ee3eb0cb79302a7ac49521c555b0a44570145beba620cd042226726abbe4e807afc0fb08836060832317a52954e1fcbdc26eaf78b212bc5e81bc3868b2e7566073b74378e0cad70124f1d677cc27b9f37132f06c657b679c944de5083058e2f9108ae8dd96268f0b4c32a9ae3954fc0820922eed9a024473d6b9930fbf7438f85a0d0d1676deb234af11a81e85b23a88e26d5c302e94c93e4ad2ce592ff441949bb6f0f06694e5523d7f2e8b4cfc2d12110b62eefb1f060475d319d8b441c72d2034367ef0b463dc57c42dd3faa19dd501c7eed91a09e9512ce01e4549c616126c2b2a9b6cf161226bbdcf5931d91bb4b12bc786faca0696ad8dbcf71da45090241787bd5bce6065062ba2d5992e9e54c1c66f41f7672c3ec6a2df6c1a0799c8d96544282d64bf1cfe5a621a78422590c091882ffa313871eacf1594a9403a6036ac80c4bea827f88392cbac7b00266461793554f3544053c98dd48a7f91ae0bee50a5179f1e9f9d089a81b25ce0fcb8a12c4d175e7b48b5a63fe74e0ef28294714f724b8a920654aa0e59c3324e81a4d281b73057bd6ecc188b757c0e31c5b2de6d53f6620723e78d438b9d4316fa0bf1de20cc1faa713d9c521e60f4eef0c02f6fce19d0363bf9c2670ef51722086dc07156f97c494294ac3474c9e5dc4643e81c901481ff6d2c1f4642fd6f8b615d2"
        );

        bytes32[] memory publicInputs = new bytes32[](33);
        publicInputs = _constructPublicInputs(
            // ownerHash
            bytes32(
                0x137ad2247d8e089ca5dc03f9a70e5bc68392ac2916495968a80c35582c1a3c37
            ),
            // message hash (hash of safe mfa op)
            bytes32(
                0x496cb0ed58fe003eda5a1f2a42209339a72ea5a8bf5bc536926820aa2e490f67
            )
        );

        bool isValid = verifier.verify(proof, publicInputs);
        console2.logBool(isValid);
    }

    function _constructPublicInputs(
        bytes32 ownerHash,
        bytes32 hash
    ) internal pure returns (bytes32[] memory) {
        bytes32[] memory publicInputs = new bytes32[](33);
        publicInputs[0] = ownerHash;

        for (uint256 i = 0; i < 32; i++) {
            publicInputs[i + 1] = bytes32(uint256(uint8(hash[i])));
        }
        return publicInputs;
    }
}
